//Game global variables
var currentScene = 0;
var a = 2;
var currentCharacter;
var characterSelected;
var startTimer = false;
var drawPatty = false;
var drawCheese = false;
var drawLettuce = false;
var drawBuns = false;
var drawFries = true;
var orderFin = false;
var score = 0;


// Character Objects
var Calin = function(x, y, height, shirtColor, initialOption) {
    this.x = x;
    this.y = y;
    this.height = height;
    this.shirtColor = shirtColor;
    this.initialOption = initialOption;
}; //Calin Constructor
Calin.prototype.draw = function() {
    var p = this.height/100;
    // Body
    noStroke();
    fill(255,219,172);
    rect(this.x + 90 * p , this.y + p * 65, p * 20, p * 20);
    arc(this.x + p * 90, this.y + p * 65, p * 20, p * 20, 180, 270);
    fill(this.shirtColor);
    rect(this.x + p * 75, this.y + p * 85, p * 50, p * 50);
    fill(255,219,172);
    arc(this.x + p * 100, this.y + p * 80, p * 20, p * 20, 0, 180);
    fill(this.shirtColor);
    triangle(this.x + p * 125, this.y + p * 85, this.x + p * 125, this.y + p * 135, this.x + p * 148, this.y + p * 135);
    triangle(this.x + p * 55, this.y + p * 135, this.x + p * 75, this.y + p * 85, this.x + p * 148, this.y + p * 135);
    // Head
    noStroke();
    fill(255,219,172);
    ellipse(this.x + p * 100, this.y + p * 34, p * 70, p * 90);
    arc(this.x + p * 75, this.y + p * 30, p * 33, p * 30, 90, 270);
    arc(this.x + p * 125, this.y + p * 30, p * 33, p * 30, -90, 90);
    fill(255, 255, 255);
    arc(this.x + p * 85, this.y + p * 30, p * 15, p * 10, 180, 360);
    arc(this.x + p * 85, this.y + p * 30, p * 15, p * 10, 0, 180);
    arc(this.x + p * 115, this.y + p * 30, p * 15, p * 10, 180, 360);
    arc(this.x + p * 115, this.y + p * 30, p * 15, p * 10, 0, 180);
    fill(110, 42, 42);
    ellipse(this.x + p * 85, this.y + p * 30, p * 8, p * 8);
    ellipse(this.x + p * 115, this.y + p * 30, p * 8, p * 8);
    fill(0, 0, 0);
    ellipse(this.x + p * 85, this.y + p * 30, p * 5, p * 5);
    ellipse(this.x + p * 115, this.y + p * 30, p * 5, p * 5);
    stroke(0, 0, 0);
    fill(255,219,172);
    arc(this.x + p * 100, this.y + p * 44, p * 10, p * 10, 90, 270);
    noStroke();
    fill(255, 0, 0);
    arc(this.x + p * 100, this.y + p * 57, p * 20, p * 20, 360, 540);
    
    // Hair
    fill(117, 68, 68);
    ellipse(this.x + p * 69, this.y + p * 12, p * 15, p * 15);
    ellipse(this.x + p * 65, this.y + p * 16, p * 15, p * 15);
    ellipse(this.x + p * 74, this.y + p * 4, p * 15, p * 15);
    ellipse(this.x + p * 76, this.y + p * 12, p * 15, p * 15);
    ellipse(this.x + p * 82, this.y + p * -2, p * 15, p * 15);
    ellipse(this.x + p * 89, this.y + p * -9, p * 15, p * 15);
    ellipse(this.x + p * 72, this.y + p * -4, p * 15, p * 15);
    ellipse(this.x + p * 65, this.y + p * 8, p * 15, p * 15);
    ellipse(this.x + p * 86, this.y + p * 3, p * 15, p * 15);
    ellipse(this.x + p * 80, this.y + p * -7, p * 15, p * 15);
    ellipse(this.x + p * 101, this.y + p * -13, p * 15, p * 15);
    ellipse(this.x + p * 94, this.y + p * 8, p * 15, p * 15);
    ellipse(this.x + p * 98, this.y + p * -1, p * 15, p * 15);
    ellipse(this.x + p * 102, this.y + p * -8, p * 15, p * 15);
    ellipse(this.x + p * 106, this.y + p * 8, p * 15, p * 15);
    ellipse(this.x + p * 115, this.y + p * 7, p * 15, p * 15);
    ellipse(this.x + p * 114, this.y + p * -9, p * 15, p * 15);
    ellipse(this.x + p * 122, this.y + p * 0, p * 15, p * 15);
    ellipse(this.x + p * 107, this.y + p * 1, p * 15, p * 15);
    ellipse(this.x + p * 126, this.y + p * 12, p * 15, p * 15);
    ellipse(this.x + p * 118, this.y + p * -4, p * 15, p * 15);
    ellipse(this.x + p * 131, this.y + p * 5, p * 15, p * 15);
    ellipse(this.x + p * 133, this.y + p * 12, p * 15, p * 15);
    if(this.initialOption === true)
    {
        // Shirt Letters
        fill(this.shirtColor);
        stroke(255, 255, 255);
        strokeWeight(3 * p);
        arc(this.x + p * 86, this.y + p * 110, p * 20, p * 27, 50, 300);
        noFill();
        stroke(255, 255, 255);
        beginShape();
        curveVertex(this.x + p * 219,  this.y + p * 202);
        curveVertex(this.x + p * 125,  this.y + p * 103);
        curveVertex(this.x + p * 108,  this.y + p * 107);
        curveVertex(this.x + p * 126,  this.y + p * 115);
        curveVertex(this.x + p * 110, this.y + p * 121);
        curveVertex(this.x + p * 12, this.y + p * 56);
        endShape();
    }
    
    // Glasses
    noStroke();
    fill(0, 0, 0);
    ellipse(this.x + p * 85, this.y + p * 0, p * 20, p * 15);
    ellipse(this.x + p * 115, this.y + p * 0, p * 20, p * 15);
    fill(111, 169, 232);
    ellipse(this.x + p * 85, this.y + p * 0, p * 15, p * 10);
    ellipse(this.x + p * 115, this.y + p * 0, p * 15, p * 10);
    stroke(0, 0, 0);
    noFill();
    strokeWeight(2 * p);
    arc(this.x + p * 100, this.y + p * 4, p * 15, p * 15, 180, 360);
    line(this.x + p * 65, this.y + p * 15, this.x + p * 75, this.y + p * 0);
    line(this.x + p * 135, this.y + p * 15, this.x + p * 125, this.y + p * 0);
}; //Calin draw
var startCalin = new Calin(162, 111, 70, color(9, 79, 176), true);// Start Scene Calin

var calinSelection = new Calin(25, 111, 75, color(9, 79, 176), true);// Character Selection Calin

var calin = new Calin(162, 111, 50, color(9, 79, 176), true);//Game object Calin

var faylynn = function(x, y, height, shirtColor, initials) {
    this.x = x;
    this.y = y;
    this.height = height;
    this.shirtColor = shirtColor;
    this.initials = initials;
};

faylynn.prototype.draw = function() {
    var p = this.height/100;

     noStroke();
     //head
     
        fill(255, 224, 178);
        rect(this.x + p *43, this.y + p *82, p *20, p *20); //neck
        
        ellipse(this.x + p *51, this.y + p *44, p *86, p *100);   // head
        
        fill(128, 99, 74);
        ellipse(this.x + p *69, this.y + p *37, p *15, p *15);    // right     eye
        ellipse(this.x + p *32, this.y + p *37, p *15, p *15);    // left     eye
        
        fill(255, 255, 255);
        arc(this.x + p *52, this.y + p *74, p *33, p *14, -16, 196);      //mouth
        
        fill(168, 119, 98);
        arc (this.x + p *21, this.y + p *31, p *43, p *96, 113, 322 ); //left hair
        arc (this.x + p *80, this.y + p *34, p *43, p *96, 228, 416 ); //right hair
        arc (this.x + p *34, this.y + p *12, p *46, p *81, 123, 331 ); //left bang
        arc (this.x + p *66, this.y + p *12, p *46, p *80, 208, 414 ); //left bang
        arc (this.x + p *1, this.y + p *60, p *34, p*168, 305, 429 ); //left long hair
        arc (this.x + p *102, this.y + p *65, p *34, p *172, 127, 236 ); //right long hair
        arc (this.x + p *5, this.y + p *111, p *34, p *133, 305, 429 ); //left longer hair
        arc (this.x + p *106, this.y + p *100, p *35, p *153, 106, 250 ); //right longer hair
        arc (this.x + p *54, this.y + p *56, p *4, p *10,-111,139);
        
        fill(245, 174, 174);
        arc(this.x + p *52, this.y + p *74, p *38, p *-5, -16, 196); //top lip
        arc(this.x + p *52, this.y + p *82, p *23, p *4, -31, 219); //bottom lip
        
        stroke(0, 0, 0);
        strokeWeight(4);
        line(this.x + p *13, this.y - p *11, this.x + p *4, this.y + p *12); //glasses left
        stroke(0, 0, 0);
        strokeWeight(4);
        line(this.x + p *87, this.y - p *13, this.x + p *95, this.y + p *13); //glasses right
        fill(89, 87, 87);
        ellipse(this.x + p *30, this.y - p *14, p *38, p *-9); //glasses left top
        ellipse(this.x + p *69, this.y - p *14, p *38, p *-9); //glasses right top
        noStroke();
    
        //body
        
        //shirt

    noStroke();
    fill(this.shirtColor);   //shirt color
    quad(this.x + p *11, this.y + p *112, this.x + p *61, this.y + p *98, this.x + p*79, this.y + p *174, this.x - p *17, this.y + p *181); //left shirt
    quad(this.x + p *119, this.y + p *193, this.x + p *98, this.y + p *127, this.x + p *60, this.y + p *99, this.x + p *14, this.y + p *172); //right shirt
    fill(0, 0, 0);
    
    //end of shirt
    
    if(this.initials === true) {
        
        //initals
    
        rect(this.x + p *24, this.y + p *129, p *25, p *3); //initials top of F
        rect(this.x + p *23, this.y + p *129, p *4, p *31); // Left of F
        rect(this.x + p *23, this.y + p *142, p *17, p *3); // bottom of F
        stroke(0, 0, 0);
        strokeWeight(3);
        line(this.x + p *84, this.y + p *129, this.x + p *68, this.y + p *161); //right of V
        stroke(0, 0, 0);
        strokeWeight(3);
        line(this.x + p *56, this.y + p *130, this.x + p *68, this.y + p *161); //left of V
    }
    // end of initials
    
    noStroke();
    fill(242, 197, 75);
    arc(this.x + p *52, this.y + p *106, p *43, p *5, -36, 212); //necklace

};

var startFaylynn = new faylynn(134, 112, 51, color(219, 70, 117), true);// Start Scene faylynn

var faylynnSelection = new faylynn(270, 111, 57, color(219, 70, 117), true);// character selection screen

var faylynnGame = new faylynn(103, 111, 40, color(219, 70, 117), true);// game object faylynn

//Buttons

var Button = function(config) {                     //Khan button
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};            //copy of button function

Button.prototype.draw = function() {
    stroke(0, 0, 0);
    strokeWeight(1);
    fill(255, 255, 255);
    rect(this.x, this.y, this.width, this.height, 5);   //prototype for drawing button
    fill(0, 0, 0);
    textSize(19);
    textAlign(CENTER, TOP);
    text(this.label, this.x+74, this.y+this.height/4);

};

Button.prototype.isMouseInside = function() {   //prototype for the inside the button
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var btnStart = new Button({
    x: 125,
    y: 200,
    label: "Start",
    onClick: function() {
        currentScene = 1;    }
});   // start button

var btnHowToPlay = new Button({
    x: 125,
    y: 260,
    label: "How to Play",
    onClick: function() {
        currentScene = 1;    }
});   // how to play button

var btnGameStart = new Button ({
    x: 125,
    y: 334,
    label: "Play",
    onClick: function() {
        currentScene = 1;    }
});  //play game button

//Appliances
// STOVE (must be on the left)
var Stove = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

Stove.prototype.draw = function() {
    stroke(0, 0, 0);
    strokeWeight(1);
    fill(148, 148, 148);
    rect(this.x, this.y, this.height, this.height);
    fill(0, 0, 0);
    rect(this.x, this.y, this.height - 44, this.height);
    ellipse(this.x + 26, this.y + 24, this.height -80, this.height - 19);
    stroke(255, 0, 0);
    strokeWeight(2);
    ellipse(this.x + 26, this.y + 24, this.height -70, this.height - 28);
};

var stoveObj1 = new Stove(0, 202, 49);
var stoveObj2 = new Stove(0, 251, 49);

//Cutting Board
var CuttingBoard = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

CuttingBoard.prototype.draw = function() {
    stroke(0, 0, 0);
    strokeWeight(1);
    fill(148, 148, 148);
    rect(this.x, this.y, this.height, this.height);
    fill(255, 255, 255);
    rect(this.x + 5, this.y + 5, this.height - 10, this.height-10);
};

var cuttingBoardObj = new CuttingBoard(246, 350, 49);

//Knife
var Knife = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

Knife.prototype.draw = function() 
{
    fill(0, 0, 0);
    rect(this.x, this.y, this.height+ 13, this.height + 3);
    fill(207, 207, 207);
    rect(this.x + 15, this.y, this.height+ 31, this.height + 3);
    arc(this.x + 32, this.y + 5, this.height + 31, this.height + 7, 0, 180);
};

var knifeObj = new Knife (248, 373, 2);

//Fryer
var Fryer = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

Fryer.prototype.draw = function() 
{
    stroke(0, 0, 0);
    strokeWeight(1);
    fill(148, 148, 148);
    rect(this.x, this.y, this.height, this.height);
    fill(75, 122, 13);
    rect(this.x +5, this.y +4, this.height +-16, this.height +-8);
    fill(0, 0, 0);
    rect(this.x +43, this.y, this.height - 44, this.height);
};

var fryerObj1 = new Fryer (351, 250, 49);
var fryerObj2 = new Fryer (351, 300, 49);

//Fry Basket
var FryBasket = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

FryBasket.prototype.draw = function()
{
    fill(0, 0, 0);
    stroke(0, 0, 0);
    strokeWeight(2);
    line(this.x +10, this.y + 10, this.x + 34, this.y + 10);
    line(this.x +10, this.y + 10, this.x + 10, this.y + 38);
    line(this.x +10, this.y + 38, this.x + 34, this.y + 38);
    line(this.x +34, this.y + 10, this.x + 34, this.y + 38);
    fill(255, 0, 0);
    strokeWeight(1);
    rect(this.x, this.y + 20, 10, 8);
    for (var j = 0; j < 5; ++j)
    {
        strokeWeight(1);
        line(this.x + 10, this.y + 14 + 5 *j, this.x +34, this.y + 14 + 5 *j);
    }
};

var fryBasketObj1 = new FryBasket(350, 250, 49);
var fryBasketObj2 = new FryBasket(350, 300, 49);

//Food Bin
var FoodBin = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

FoodBin.prototype.draw= function()
{
    stroke(0, 0, 0);
    strokeWeight(1);
    fill(179, 186, 104);
    rect(this.x, this.y, this.height, this.height);
    fill(219, 219, 219);
    rect(this.x +5, this.y + 5, this.height - 10, this.height - 10);
};

var foodBinObj1 = new FoodBin (51, 350, 49);
var foodBinObj2 = new FoodBin (100, 350, 49);
var foodBinObj3 = new FoodBin (149, 350, 49);
var foodBinObj4 = new FoodBin (198, 350, 49);

//Serving Counter
var ServingCounter = function(x, y, height)
{
    this.x = x;
    this.y = y;
    this.height = height;
};

ServingCounter.prototype.draw = function()
{
    stroke(0, 0, 0);
    fill(148, 148, 148);
    rect(this.x, this.y, this.height + 68, this.height);
    fill(0, 0, 0);
    rect(this.x + 4, this.y + 4, this.height - 8, this.height - 8);
    fill(218, 240, 53);
    ellipse(this.x + 95, this.y + 24, this.height - 30, this.height - 30);
    ellipse(this.x + 95, this.y + 24, this.height - 45, this.height - 45);
};

var servingCounterObj = new ServingCounter (49, 100, 49);

// Plate
var Plate = function(x, y, height) 
{
    this.x = x;
    this.y = y;
    this.height = height;
};

Plate.prototype.draw = function() {
    fill(255, 255, 255);
    ellipse(this.x, this.y, this.height, this.height);
    stroke(217, 217, 217);
    ellipse(this.x, this.y, this.height -10, this.height-10);
};

var plateObj = new Plate(227, 125, 40);

//Patty
var Patty = function(x, y, height) {
    this.x = x;
    this.y = y;
    this.height = height;
};

Patty.prototype.draw = function ()
{
    var p = this.height/100;
    noStroke();
    fill(163, 120, 74);
    ellipse(this.x + p * 145, this.y + p * 160, p * 96, p * 19);     //patty
}; 

var pattyObj1 = new Patty(foodBinObj1.x - 27, foodBinObj1.y - 30, 36);

var pattyObj2 = new Patty(plateObj.x - 51, plateObj.y - 56, 36);

//Lettuce
var Lettuce = function(x, y, height) {
    this.x = x;
    this.y = y;
    this.height = height;
};

Lettuce.prototype.draw = function ()
{
    var p = this.height/100;
    
    noStroke();
    fill(207, 245, 147);
    ellipse(this.x + p * 112,this.y + p * 153, p * 35, p * 11);     //left side if lett
    ellipse(this.x + p * 117,this.y + p * 146, p * 29, p * 14);     //left top lett
    ellipse(this.x + p * 134,this.y + p * 150, p * 41, p * 14);     //mid lett
    ellipse(this.x + p * 165,this.y + p * 154, p * 64, p * 14);     //bottom right lett
    ellipse(this.x + p * 161,this.y + p * 147, p * 35, p * 14);     //top right lett
    
}; 

var lettuceObj1 = new Lettuce(foodBinObj2.x - 21, foodBinObj2.y -22, 32);

var lettuceObj2 = new Lettuce(plateObj.x - 46, plateObj.y - 51, 32);

//Buns
var Buns = function(x, y, height) {
    this.x = x;
    this.y = y;
    this.height = height;
};

Buns.prototype.draw = function ()
{
    var p = this.height/100;
    
    noStroke();
    fill(242, 208, 159);
    arc(this.x + p * 144, this.y + p * 145, p * 96, p * 53, -188, 11); //top bun
    arc(this.x + p * 145, this.y + p * 166, p * 97,p * 27,-12,197);  //bottom bun

    fill(191, 157, 76);
    ellipse(this.x + p * 117, this.y + p * 128, p * 6, p * -2); //btm left seed
    ellipse(this.x + p * 132, this.y + p * 124, p * 6, p * -2); //top left
    ellipse(this.x + p * 151, this.y + p * 128, p * 6, p * -2); //btm right
    ellipse(this.x + p * 167, this.y + p * 124, p * 6, p * -2); //top right
    ellipse(this.x + p * 135, this.y + p * 129, p * 6, p * -2); //btm mid
    ellipse(this.x + p * 155, this.y + p * 122, p * 6, p * -2); //top mid
    ellipse(this.x + p * 173, this.y + p * 130, p * 6, p * -2);
    
}; 


var bunsObj1 = new Buns(172,321, 36);

var bunsObj2 = new Buns(plateObj.x -52, plateObj.y -56, 36);

//Burger
var Burger = function(x, y, height) {
    this.x = x;
    this.y = y;
    this.height = height;
};

Burger.prototype.draw = function ()
{
    var p = this.height/100;
    
    noStroke();
    fill(163, 120, 74);
    ellipse(this.x + p * 145, this.y + p * 160, p * 96, p * 19);     //patty
    
    noStroke();
    fill(207, 245, 147);
    ellipse(this.x + p * 112,this.y + p * 153, p * 35, p * 11);     //left side if lett
    ellipse(this.x + p * 117,this.y + p * 146, p * 29, p * 14);     //left top lett
    ellipse(this.x + p * 134,this.y + p * 150, p * 41, p * 14);     //mid lett
    ellipse(this.x + p * 165,this.y + p * 154, p * 64, p * 14);     //bottom right lett
    ellipse(this.x + p * 161,this.y + p * 147, p * 35, p * 14);     //top right lett
    
    
    noStroke();
    fill(255, 248, 171);
    quad(this.x + p * 88, this.y + p * 146, this.x + p * 130, this.y + p * 156, this.x + p * 195, this.y + p * 154, this.x + p * 152, this.y + p * 136);  //cheese
    
    fill(242, 208, 159);
    arc(this.x + p * 144, this.y + p * 145, p * 96, p * 53, -188, 11); //top bun
    arc(this.x + p * 145, this.y + p * 166, p * 97,p * 27,-12,197);  //bottom bun

    fill(191, 157, 76);
    ellipse(this.x + p * 117, this.y + p * 128, p * 6, p * -2); //btm left seed
    ellipse(this.x + p * 132, this.y + p * 124, p * 6, p * -2); //top left
    ellipse(this.x + p * 151, this.y + p * 128, p * 6, p * -2); //btm right
    ellipse(this.x + p * 167, this.y + p * 124, p * 6, p * -2); //top right
    ellipse(this.x + p * 135, this.y + p * 129, p * 6, p * -2); //btm mid
    ellipse(this.x + p * 155, this.y + p * 122, p * 6, p * -2); //top mid
    ellipse(this.x + p * 173, this.y + p * 130, p * 6, p * -2);
    
}; 

var burgerObj1 = new Burger (plateObj.x - 43, plateObj.y - 53, 36);

var Cheese = function(x, y, height) {
    this.x = x;
    this.y = y;
    this.height = height;
};

Cheese.prototype.draw = function ()
{
    var p = this.height/100;
    
    noStroke();
    fill(255, 234, 0);
    quad(this.x + p * 88, this.y + p * 146, this.x + p * 130, this.y + p * 156, this.x + p * 195, this.y + p * 154, this.x + p * 152, this.y + p * 136);  //cheese
    
}; 

var cheeseObj1 = new Cheese(121, 321, 37);

var cheeseObj2 = new Cheese(plateObj.x - 53 ,plateObj.y - 56, 37);


//Player Movement
var keys = [];

var keyPressed = function()
{
    keys[keyCode] = true;
};

var keyReleased = function()
{
    keys[keyCode] = false;
};

//Different Screen Functions
var splashScreen = function () {
    background(178, 210, 255);
    
    fill(0, 0, 0);
    textSize(40);
    text("Dish Dash", 192, 21);
    
    fill(255, 255, 255);
    textSize(40);
    text("Dish Dash", 190, 19);
    
    startCalin.draw();
    
    startFaylynn.draw();
    
    btnStart.draw();
    
    btnHowToPlay.draw();
    
};

var howToPlayScreen = function () {
    background(143, 188, 255);
    fill(255, 255, 255);
    rect(25, 25, 350, 350);
    fill(0, 0, 0);
    textSize(20);
    text("How To Play", 190, 31);
    textSize(11.4);
    text("Game objective: To score points the player must complete as many customers’ orders as possible before the time runs out. Customers will only wait for a meal for 30 seconds, any meals not made in time will subtract from the final score. Score the specified amount of points to win.Cooking: The player must use the ingredient bins by using the interact button to pick up an ingredient. Some ingredients will need to be cooked depending on the recipe using the interact button again. Use the specified appliance for each ingredient. Put all ingredients on a plate to assemble the order. Place the plate on the serving counter for a customer to receive it. Burger: To make a burger the user must grab a bun from the bun bin and place it on a plate. The user must then grab an uncooked patty and place it on the skillet for 5 seconds when it will then turn brown. Place the patty on the bun. Grab lettuce from the lettuce bin and place it on the cutting board. Repeatedly press the interact button to cut the lettuce until it turns into smaller pieces. Place the lettuce in the patty. Take a block of cheese from the cheese bin and place it on the cutting board. Repeatedly press the interact button to cut the cheese until it turns into smaller pieces. Place the cheese on the burger. The order is then complete.", 28, 53, 344, 331);
    
    textSize(20);
    text("<- Return", 200, 377);
};

var characterScreen = function()
{
    background(255, 255, 255);
    
    textSize(30);
    fill(0, 0, 0);
    text("Character Selection", 200, 36);
    
    btnGameStart.draw();
    
    calinSelection.draw();
    
    faylynnSelection.draw();
    
    if (mouseX >=  65 && mouseX <= 135 && mouseY >= 90 && mouseY <= 215){
        textSize(15);
        fill(0, 0, 0);
        text("Calin Smith:", 200, 263);
        textSize(12);
        text("Calin has the ability to fry fries in 5 seconds rather than 9.", 200,           294);
    }
    
    if (mouseX >=  265 && mouseX <= 335 && mouseY >= 90 && mouseY <= 220){
        textSize(15);
        fill(0, 0, 0);
        text("Faylynn Vidrio:", 200, 263);
        textSize(12);
        text("Faylynn has the ability to cook patties in 5 seconds instead of 9.", 200,           294);
    }
    
    if (mouseX >=  65 && mouseX <= 135 && mouseY >= 90 && mouseY <= 215 && mouseIsPressed){
        currentCharacter = calin;
        characterSelected = true;
    }
    
    if (mouseX >=  265 && mouseX <= 335 && mouseY >= 90 && mouseY <= 220 && mouseIsPressed){
        currentCharacter = faylynn;
        characterSelected = true;
    }
    
    if (currentCharacter === calin)
    {
        fill(69, 158, 20);
        noStroke();
        rect(calinSelection.x +30, calinSelection.y - 23, 90, 144);
        calinSelection.draw();
    }
    
     if (currentCharacter === faylynn)
    {
        fill(69, 158, 20);
        noStroke();
        rect(faylynnSelection.x - 15, faylynnSelection.y - 23, 90, 144);
        faylynnSelection.draw();
    }
    
    if (characterSelected === false)
    {
        fill(255, 0, 0);
        text("Please select a character", mouseX, mouseY);
    }
    
};


var gameScreen = function () {
    background(5, 162, 230);
    for( var i = 0; i < 10; ++i) // Floor pattern
    {
        for (var j = 0; j < 10; ++j)
        {
        fill(232, 200, 162);
        stroke(156, 147, 147);
        strokeWeight(1);
        rect( 0 +j*50, 0+i*50,50,50);  
        }
        
    }
    noStroke();
    fill(85, 100, 117); //Counters
    rect(1,101,406,49);  //top
    rect(1,143,49,208);  //left
    rect(350,145,49,208); //right
    rect(1,350,406,49);
    
    stoveObj1.draw();   //Stoves
    stoveObj2.draw();
    
    cuttingBoardObj.draw(); //Cutting board
    
    knifeObj.draw();    //Knife
    
    fryerObj1.draw();   //Fryers
    fryerObj2.draw();
    
    fryBasketObj1.draw();   //Fry Baskets
    fryBasketObj2.draw();
    
    foodBinObj1.draw(); //Food Bins
    foodBinObj2.draw();
    foodBinObj3.draw();
    foodBinObj4.draw();
    
    servingCounterObj.draw();
    
    plateObj.draw();
    
    pattyObj1.draw();
    
    lettuceObj1.draw();
    
    cheeseObj1.draw();
    
    bunsObj1.draw();
    
    if (drawPatty === true)
    {
        pattyObj2.draw();
    }
    if( drawLettuce === true)
    {
        lettuceObj2.draw();
    }
    
    if( drawCheese === true)
    {
        cheeseObj2.draw();
    }
    if( drawBuns === true)
    {
        bunsObj2.draw();
    }
    
    if(drawPatty === true && drawLettuce === true && drawCheese === true && drawBuns === true)
    {
        orderFin = true;
    }
    
    if(orderFin === true)
    {
        fill(0, 0, 0);
        textSize(15);
        text("Order Up!", plateObj.x, plateObj.y - 40);
    }
    
    if(currentCharacter === calin)
    {
        calin.draw();
    }
    
    if(currentCharacter === faylynn)
    {
        faylynnGame.draw();
    }
    
    //Stove detection
    if ((calin.x >= stoveObj1.x + 19 || faylynnGame.x >= stoveObj1.x +49) && (calin.x < stoveObj1.x + 49 || faylynnGame.x <= stoveObj1.x) && (calin.y >= stoveObj1.y - 60 || faylynnGame.y >= stoveObj1.y) && (calin.y <= stoveObj1.y - 50 || faylynnGame.y <= stoveObj1.y + 26))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", stoveObj1.x + 26, stoveObj1.y + 14);
    }
    
    else if ((calin.x >= stoveObj2.x + 19 || faylynnGame.x >= stoveObj2.x +49) && (calin.x < stoveObj2.x + 49 || faylynnGame.x <= stoveObj2.x) && (calin.y >= stoveObj2.y - 60 || faylynnGame.y >= stoveObj2.y - 10) && (calin.y <= stoveObj2.y + 23 || faylynnGame.y <= stoveObj2.y + 36))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", stoveObj2.x + 26, stoveObj2.y + 14);
    }
    
    //Fryer detection
    else if ((calin.x + 70 >= fryerObj1.x - 15 || faylynnGame.x + 30 >= fryerObj1.x - 10) && (calin.x <= fryerObj1.x + 49 || faylynnGame.x <= fryerObj1.x) && (calin.y + 50 >= fryerObj1.y || faylynnGame.y >= fryerObj1.y) && (calin.y +50 <= fryerObj1.y + 49 || faylynnGame.y <= fryerObj1.y + 29))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", fryerObj1.x + 26, fryerObj1.y + 14);
    }
    
    else if ((calin.x + 70 >= fryerObj2.x - 15 || faylynnGame.x + 30 >= fryerObj2.x - 10) && (calin.x <= fryerObj2.x + 49 || faylynnGame.x <= fryerObj2.x) && (calin.y + 50 >= fryerObj2.y || faylynnGame.y >= fryerObj2.y) && (calin.y +50 <= fryerObj2.y + 49 || faylynnGame.y <= fryerObj2.y + 29))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", fryerObj2.x + 26, fryerObj2.y + 14);
    }
    
    //Food bin detection
    else if ((calin.x + 70 >= foodBinObj1.x +30 || faylynnGame.x + 20 >= foodBinObj1.x) && (calin.x <= foodBinObj1.x + 11 || faylynnGame.x + 20 <= foodBinObj1.x + -14) && (calin.y >= foodBinObj1.y - 15 || faylynnGame.y + 75 >= foodBinObj1.y -15))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", foodBinObj1.x + 26, foodBinObj1.y + 14);
    }
    
    else if ((calin.x + 70 >= foodBinObj2.x || faylynnGame.x + 20 >= foodBinObj2.x) && (calin.x <= foodBinObj2.x + 11 || faylynnGame.x + 20 <= foodBinObj2.x + -14) && (calin.y >= foodBinObj2.y - 15 || faylynnGame.y + 75 >= foodBinObj2.y -15))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", foodBinObj2.x + 26, foodBinObj2.y + 14);
    }
    
    else if ((calin.x + 70 >= foodBinObj3.x || faylynnGame.x + 20 >= foodBinObj3.x) && (calin.x <= foodBinObj3.x + 11 || faylynnGame.x + 20 <= foodBinObj3.x + -14) && (calin.y >= foodBinObj3.y - 15 || faylynnGame.y + 75 >= foodBinObj3.y -15))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", foodBinObj3.x + 26, foodBinObj3.y + 14);
    }
    
    else if ((calin.x + 70 >= foodBinObj4.x || faylynnGame.x + 20 >= foodBinObj4.x) && (calin.x <= foodBinObj4.x + 11 || faylynnGame.x + 20 <= foodBinObj4.x + -14) && (calin.y >= foodBinObj4.y - 15 || faylynnGame.y + 75 >= foodBinObj4.y -15))
    {
        fill(255, 255, 255);
        textSize(20);
        text ("[E]", foodBinObj4.x + 26, foodBinObj4.y + 14);
    }
    
    //Cutting board detection
    else if ((calin.x + 70 >= cuttingBoardObj.x || faylynnGame.x + 20 >= cuttingBoardObj.x) && (calin.x <= cuttingBoardObj.x + 11 || cuttingBoardObj.x + 20 <= cuttingBoardObj.x + -14) && (calin.y >= cuttingBoardObj.y - 15 || faylynnGame.y + 75 >= cuttingBoardObj.y -15))
    {
        fill(0, 0, 0);
        textSize(20);
        text ("[E]", cuttingBoardObj.x + 26, cuttingBoardObj.y + 14);
    }
    
};

draw = function() {
    if(currentScene === 0) {
    splashScreen();
    }
    
    else if (currentScene === 1) {
        characterScreen();
    }
    
    else if (currentScene === 2) {
        gameScreen();
        
        if(keys[UP])
        {
            calin.y-=a;
            if(calin.y < 100){
                calin.y = 100;
            }
            
            faylynnGame.y-=a;
            if(faylynnGame.y < 95)
            {
                faylynnGame.y = 95;
            }
        }
        if(keys[DOWN])
        {
            calin.y+=a;
            if(calin.y > 285){
                calin.y=285;
            }
            
            faylynnGame.y+=a;
            if(faylynnGame.y >= 275)
            {
                faylynnGame.y = 275;
            }
        }
        if(keys[RIGHT])
        {
            calin.x+=a;
            if(calin.x > 280){
                calin.x = 280;
            }
            
            faylynnGame.x+=a;
            if(faylynnGame.x >= 305)
            {
                faylynnGame.x = 305;
            }
        }
        if(keys[LEFT])
        {
            calin.x-=a;
            if(calin.x < 20){
                calin.x = 20;
            }
            
            faylynnGame.x-=a;
            if(faylynnGame.x <= 55)
            {
                faylynnGame.x = 55;
            }
        }
    }
    
    else if (currentScene === 3){
        howToPlayScreen();
    }
};


mouseClicked = function(){
    if (currentScene === 0 && btnStart.isMouseInside()){
        currentScene = 1;
    }
    
    else if (currentScene === 1 && btnGameStart.isMouseInside() &&(currentCharacter === calin || currentCharacter === faylynn)){
        currentScene = 2;
        characterSelected = true;
    }
    
    else if (currentScene === 1 && btnGameStart.isMouseInside())
    {
        characterSelected = false;
    }
    
    else if (currentScene === 0 && btnHowToPlay.isMouseInside()){
        currentScene = 3;
    }
    
    else if (currentScene === 3 && mouseX >= 155 && mouseX<= 250 && mouseIsPressed)
    {
        currentScene = 0;
    }
    
    else if ((calin.x + 70 >= foodBinObj1.x +30 || faylynnGame.x + 20 >= foodBinObj1.x) && (calin.x <= foodBinObj1.x + 11 || faylynnGame.x + 20 <= foodBinObj1.x + -14) && (calin.y >= foodBinObj1.y - 15 || faylynnGame.y + 75 >= foodBinObj1.y -15) && mouseIsPressed)
    {
      drawPatty = true;
    }
    
    else if ((calin.x + 70 >= foodBinObj2.x +30 || faylynnGame.x + 20 >= foodBinObj2.x) && (calin.x <= foodBinObj2.x + 11 || faylynnGame.x + 20 <= foodBinObj2.x + -14) && (calin.y >= foodBinObj2.y - 15 || faylynnGame.y + 75 >= foodBinObj2.y -15) && mouseIsPressed)
    {
       drawLettuce = true;
    }
    
     else if ((calin.x + 70 >= foodBinObj3.x +30 || faylynnGame.x + 20 >= foodBinObj3.x) && (calin.x <= foodBinObj3.x + 11 || faylynnGame.x + 20 <= foodBinObj3.x + -14) && (calin.y >= foodBinObj3.y - 15 || faylynnGame.y + 75 >= foodBinObj3.y -15) && mouseIsPressed)
    {
       drawCheese = true;
    }
    
    else if ((calin.x + 70 >= foodBinObj4.x +30 || faylynnGame.x + 20 >= foodBinObj4.x) && (calin.x <= foodBinObj4.x + 11 || faylynnGame.x + 20 <= foodBinObj4.x + -14) && (calin.y >= foodBinObj4.y - 15 || faylynnGame.y + 75 >= foodBinObj4.y -15) && mouseIsPressed)
    {
       drawBuns = true;
    }
};
